# If we have 4 containers like this
#docker run -d --name=mysql_container mysql:8.0 -p 3306:3306 
#docker run -d --name=php_container php:8.2-fpm -p 5000:80 --link php:php
#nginx... 
#redis....
# We can run them them simultaneously using a docker compose.yaml like this

version: '3.8'

networks:
  my_network:  # Define a custom network

services:
  nginx:
    image: nginx:latest
    container_name: nginx_container
    ports:
      - "8080:80"
    # volumes:
    #   - ./nginx.conf:/etc/nginx/nginx.conf:ro
    #   - ./html:/usr/share/nginx/html:ro
    depends_on:
      - php
    networks:
      - my_network

  php:
    image: php:8.2-fpm
    container_name: php_container
    volumes:
      - ./html:/var/www/html
    depends_on:
      - mysql
    networks:
      - my_network

  mysql:
    image: mysql:8.0
    container_name: mysql_container
    # restart: always
    # environment:
    #   MYSQL_ROOT_PASSWORD: rootpassword
    #   MYSQL_DATABASE: mydb
    #   MYSQL_USER: user
    #   MYSQL_PASSWORD: password
    ports:
      - "3306:3306"
    networks:
      - my_network

  redis:
    image: redis:latest
    container_name: redis_container
    restart: always
    ports:
      - "6379:6379"
    networks:
      - my_network


#Applying this docker compose
# docker-compose up -d
#in php, We can use "mysql"(Service name) as the database host name
